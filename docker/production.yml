version: '3.3'
services:
    redis_db:
      image: redis:4.0-alpine
      command: redis-server --requirepass ${REDIS_PASSWORD}
      volumes:
        - ./docker-config/redis_prod.conf:/redis.conf
      command: [ "redis-server", "/redis.conf" ]
    web-server:
      image: jeverd/liteboard-ngnix:latest
      ports:
        - ${WEB_SERVER_PORT_HTTP}:${WEB_SERVER_PORT_HTTP}
        - ${WEB_SERVER_PORT_HTTPS}:${WEB_SERVER_PORT_HTTPS}
      volumes:
        - ./letsencrypt:/etc/letsencrypt
    app:
      image: jeverd/liteboard-express:latest
      links:
        - redis_db
        - web-server
      environment:
        - NODE_ENV=${NODE_ENV}
        - EXPRESS_PORT=${EXPRESS_PORT}
        - PT_HOST=${PT_HOST}
        - PT_PORT=${PT_PORT}
        - REDIS_URL=${REDIS_URL}
        - SESSION_SECRET=${SESSION_SECRET}
        - SESSION_NAME=${SESSION_NAME}
        - SESSION_TTLE=${SESSION_TTLE}
        - LOGGER= ${LOGGER}
        - EMAIL=${EMAIL}
        - EMAIL_PASSWORD=${EMAIL_PASSWORD}
        - EMAIL_SERVICE=${EMAIL_SERVICE}
      depends_on:
        - redis_db
        - web-server
        - janus    # might want to add some checks to ensure janus is ready, instead of just waiting for the container to be up... TODO...
      restart: always
    janus:
      image: canyan/janus-gateway:master_88df9449ac54f27afa29672cf092fac65a695c29
      command: ["/usr/local/bin/janus", "-F", "/usr/local/etc/janus"]
      links:
        - web-server
      ports:
        - "8088:8088"
        - "8089:8089"
        - "8889:8889"
        - "8000:8000"
        - "7088:7088"
        - "7089:7089"
        - "10000-10200:10000-10200/udp"
      volumes:
        - ./docker-config/janus.jcfg:/usr/local/etc/janus/janus.jcfg  # might need to change this later, dk if this is best practice .... TODO
        - ./docker-config/janus.transport.http.jcfg:/usr/local/etc/janus/janus.transport.http.jcfg
    coturn:
      image: instrumentisto/coturn
      network_mode: "host"   # coturn docker docs mentioned to do this, means that docker container doesnt gets its own ip.
      volumes:
        -./docker-config/turnserver.conf:/etc/coturn/turnserver.conf

